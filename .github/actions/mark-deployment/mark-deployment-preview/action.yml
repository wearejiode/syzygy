name: Mark Deployment as Preview
description: Sets a preview environment for any deployment

inputs:
  preview_host:
    description: The host for the preview environment (e.g. preview.jiode.workers.dev)
    required: false
    default: 'preview.jiode.workers.dev'
  service_prefix:
    description: Subdomain prefix for per-PR previews (e.g. "sesame-pr-")
    required: false
    default: 'sesame-pr-'
  apps_root:
    description: Path prefix that indicates app code (used to decide if a real preview exists)
    required: false
    default: 'apps/'

runs:
  using: composite
  steps:
    - name: Ensure code present
      uses: actions/checkout@v4

    - name: Create GitHub Deployment (preview)
      id: create
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const ref = context.payload.pull_request?.head?.sha || context.sha; // SHA for PR or push
          const res = await github.rest.repos.createDeployment({
            owner, repo, ref,
            environment: 'preview',
            auto_merge: false,
            required_contexts: [],
            transient_environment: true,
            production_environment: false,
            description: 'PR preview (CI-only or real)'
          });
          core.setOutput('id', res.data.id);

    # Decide whether this PR actually changed app code (under apps_root).
    - name: Detect if app files changed
      id: detect
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'pull_request_target' }}
      uses: actions/github-script@v7
      with:
        script: |
          const number = context.payload.pull_request?.number;
          if (!number) {
            core.setOutput('apps_changed', 'false');
            return;
          }
          const appsRoot = `${{ toJSON(inputs.apps_root) }}`;
          const { owner, repo } = context.repo;
          const files = await github.paginate(github.rest.pulls.listFiles, {
            owner, repo, pull_number: number, per_page: 100
          });
          const names = files.map(f => f.filename);
          const changed = names.some(n => n.startsWith(appsRoot));
          core.info(`apps_root=${appsRoot} changed=${changed}`);
          core.info(`sample files: ${names.slice(0,10).join(', ')}`);
          core.setOutput('apps_changed', changed ? 'true' : 'false');

    # Compute the URL to publish: per-PR preview if apps changed; otherwise link to the PR.
    - name: Compute preview URL
      id: url
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const pr = context.payload.pull_request;
          if (!pr) {
            const url = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;
            core.setOutput('url', url);
            core.setOutput('is_pr', 'false');
            core.info(`Non-PR event â†’ linking to Actions run: ${url}`);
            return;
          }
          const number = pr.number;
          // Only trust the detector output.
          const appsChanged = '${{ steps.detect.outputs.apps_changed }}' === 'true';
          const host = '${{ inputs.preview_host }}';
          const prefix = '${{ inputs.service_prefix }}';
          const previewUrl = appsChanged
            ? `https://${prefix}${number}.${host}`
            : `https://github.com/${owner}/${repo}/pull/${number}`;

          core.info(`apps_changed=${appsChanged} â†’ url=${previewUrl}`);
          core.setOutput('url', previewUrl);
          core.setOutput('is_pr', 'true');

    - name: Mark Deployment success
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const deployment_id = '${{ steps.create.outputs.id }}';
          const environment_url = '${{ steps.url.outputs.url }}';
          await github.rest.repos.createDeploymentStatus({
            owner, repo,
            deployment_id,
            state: 'success',
            environment: 'preview',
            environment_url, // must be http(s)
            log_url: `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`,
            auto_inactive: true
          });

    - name: Upsert preview URL comment
      if: ${{ steps.url.outputs.is_pr == 'true' }}
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const pr = context.payload.pull_request;
          if (!pr) return;

          // Skip commenting on forked PRs (token has read-only perms there).
          const headFull = pr.head?.repo?.full_name || '';
          const baseFull = `${owner}/${repo}`;
          const isFork = headFull.toLowerCase() !== baseFull.toLowerCase();
          if (isFork) {
            core.info(`PR originates from fork (${headFull}); skipping comment to avoid 403.`);
            return;
          }

          const marker = '<!-- preview-link-marker -->';
          const url = '${{ steps.url.outputs.url }}';
          const body = [
            marker,
            'âœ… **Preview deployed** to `preview`',
            '',
            `ðŸ”— ${url}`,
            `ðŸ§ª Build: https://github.com/${owner}/${repo}/actions/runs/${context.runId}`
          ].join('\n');

          try {
            const { data: comments } = await github.rest.issues.listComments({
              owner, repo, issue_number: pr.number, per_page: 100
            });
            const existing = comments.find(c => c.user?.type === 'Bot' && c.body?.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
              core.info(`Updated preview link comment on PR #${pr.number}.`);
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: pr.number, body });
              core.info(`Posted preview link comment on PR #${pr.number}.`);
            }
          } catch (e) {
            if (e.status === 403) {
              core.warning(`Skipping comment due to permissions (likely forked PR). Details: ${e.message}`);
              return;
            }
            throw e;
          }
