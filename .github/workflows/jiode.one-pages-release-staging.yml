name: jiode.one-pages-release-staging

on:
  push:
    branches: [main]
    paths:
      - 'apps/core/jiode/jiode.one/**'
      - '.github/workflows/**'
      - 'pnpm-lock.yaml'
      - 'package.json'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  deployments: write

jobs:
  build-and-deploy-staging:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: 20
    steps:
      - uses: actions/checkout@v4

      - name: Enable Corepack (pnpm)
        run: corepack enable

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Build (Nx target)
        run: pnpm -w --filter @jiode/jiode.one run build

      - name: Upload build artifact (for promote/rollback)
        uses: actions/upload-artifact@v4
        with:
          name: jiode-one-pages-${{ github.sha }}
          path: dist/apps/jiode.one/
          if-no-files-found: error
          retention-days: 30

      # Deploy to Cloudflare Pages as "staging"
      - name: Deploy to Cloudflare Pages (staging)
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_PAGES_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: jiode-one
          directory: dist/apps/jiode.one/
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          # Use a stable label so branch protection can require “preview” or “staging”
          branch: staging
          # (optional) gitHubDeployment: false

  mark-deployment:
    if: ${{ github.event_name == 'push' }}
    needs: build-and-deploy-staging
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Deployment (environment=staging)
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: staging
          ref: ${{ github.sha }}
          description: Cloudflare Pages (staging)
          # environment_url: <paste Pages staging URL here if you have a fixed one>
