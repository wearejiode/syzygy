name: PR Labels + Semantic Title

on:
  # pull_request_target runs in the base repo context:
  # - lets us add labels & comments safely
  # - still reads PR head contents via API
  pull_request_target:
    types: [opened, edited, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: pr-labels-semantic-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  label:
    name: Auto-label by path
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml
          sync-labels: true

  semantic:
    name: Enforce semantic PR title
    needs: label
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        # Skip for bots/deps (either PR author is dependabot or labeler added type:deps/bot)
        if: >
          github.actor != 'dependabot[bot]' &&
          !contains(join(github.event.pull_request.labels.*.name, ','), 'type:deps') &&
          !contains(join(github.event.pull_request.labels.*.name, ','), 'bot')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Keep these lowercase; the action expects canonical types
          types: |
            feat
            fix
            perf
            chore
            docs
            refactor
            test
            build
            ci
          requireScope: true
          scopes: |
            sesame
            jiode.one
            genie-session
            global
            multi

  nudge-on-fail:
    name: Coach on failure
    needs: semantic
    if: ${{ always() && needs.semantic.result == 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - name: Add "needs:guidelines" label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: needs:guidelines

      - name: Comment with guidance
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Thanks for the PR! ❗ The title doesn’t follow our convention.

            **Format:** `type(scope): subject`
            **Types:** feat, fix, perf, chore, docs, refactor, test, build, ci
            **Scopes:** sesame, jiode.one, genie-session, global, multi

            Examples:
            - `feat(sesame): add image proxy`
            - `docs(jiode.one): update README`
            - `ci(global): update shared workflow`
            - `refactor(multi): align api + worker utils`

  scope-guard:
    name: Scope ↔ area label guard
    needs: [label, semantic]
    if: ${{ needs.semantic.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Enforce scope matches area label(s)
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title || '';
            const m = title.match(/^(\w+)\(([^)]+)\):/);
            if (!m) {
              core.setFailed('PR title must start with type(scope): subject');
              return;
            }
            const scope = m[2];

            // Allow umbrella scopes without strict area matching
            if (['global', 'multi'].includes(scope)) {
              core.info(`Umbrella scope "${scope}" allowed. Skipping strict area check.`);
              return;
            }

            // Fetch labels on this PR
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });

            const areas = labels
              .map(l => l.name)
              .filter(n => n.startsWith('area:'))
              .map(n => n.replace('area:', ''));

            if (areas.length === 0) {
              core.info('No area:* labels found; skipping area/scope guard.');
              return;
            }
            if (areas.length > 1) {
              core.setFailed(`Multiple area labels detected (${areas.join(', ')}). Use scope "multi" or "global".`);
              return;
            }
            if (areas[0] !== scope) {
              core.setFailed(`Scope "${scope}" does not match area label "area:${areas[0]}".`);
            } else {
              core.info(`Scope "${scope}" matches area label "area:${areas[0]}".`);
            }

      - name: Require area label when app files change
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });
            const changed = files.map(f => f.filename);

            const touches = {
              sesame: changed.some(p => p.startsWith('apps/core/jiode/sesame.jiode.one/')),
              'jiode.one': changed.some(p => p.startsWith('apps/core/jiode/jiode.one/')),
              'genie-session': changed.some(p => p.startsWith('apps/core/api/genie-session/')),
            };
            const appTouched = Object.values(touches).some(Boolean);

            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner, repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });
            const areas = new Set(
              labels.map(l => l.name).filter(n => n.startsWith('area:')).map(n => n.replace('area:', ''))
            );

            if (appTouched && areas.size === 0) {
              core.setFailed('This PR changes app files but has no area:* label. The labeler may be missing a path.');
            }
